receivers:
  otlp:
    protocols:
      grpc:
      http:
        cors:
          allowed_origins:
            - "http://*"
            - "https://*"

exporters:
# Data sources: traces, metrics, logs
#  file:
#    path: ./data/traces.json
  debug:
    verbosity: detailed
  otlp/jaeger:
    endpoint: "toltek_jaeger:4317"
    tls:
      insecure: true
  otlphttp/seq:
    endpoint: "http://toltek_seq/ingest/otlp"
    auth:
      authenticator: headers_setter
  prometheus:
    endpoint: toltek_prometheus:9090
    namespace: default
  zipkin:
    endpoint: http://toltek_zipkin:9411/api/v2/spans

processors:
  batch:
  filter/ottl:
    error_mode: ignore
    metrics:
      metric:
        # FIXME: remove when a Metrics View is implemented in the checkout and productcatalog components
        # or when this issue is resolved: https://github.com/open-telemetry/opentelemetry-go-contrib/issues/3071
        - 'name == "rpc.server.duration"'
  transform:
    metric_statements:
      - context: metric
        statements:
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-java/issues/4834
          - set(description, "") where name == "queueSize"
          # FIXME: remove when this issue is resolved: https://github.com/open-telemetry/opentelemetry-python-contrib/issues/1958
          - set(description, "") where name == "http.client.duration"
       
extensions:
  health_check:
  pprof:
  zpages:
  headers_setter:
    headers:
      - action: upsert
        key: X-Seq-ApiKey
        value: SeqApiKey

connectors:
  spanmetrics:

service:
  extensions: [health_check, pprof, zpages, headers_setter ]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp/jaeger, zipkin,  spanmetrics]
    metrics:
      receivers: [otlp, spanmetrics]
      processors: [filter/ottl, transform, batch]
      exporters: [prometheus]
    logs:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/seq]
